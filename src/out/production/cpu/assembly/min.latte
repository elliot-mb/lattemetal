--minimum element of an array (part of livermore suite)

                            --just using temporary register zero to create the data
                            --write required arguments: array start, array length
addi t0 zero #3             --start (starts at [2])
st t0 zero #0               --store start at [0]
addi t0 zero #10            --length
st t0 zero #1               --store length at [1]

                            --write array: elements 0 to 9
ld t1 zero #0               --loads the start location into register t1
addi t0 zero #-1
st t0 t1 #0
addi t0 zero #10
st t0 t1 #1
addi t0 zero #2
st t0 t1 #2
addi t0 zero #4
st t0 t1 #3
addi t0 zero #-5
st t0 t1 #4
addi t0 zero #-2
st t0 t1 #5
addi t0 zero #-5
st t0 t1 #6
addi t0 zero #-1
st t0 t1 #7
addi t0 zero #2
st t0 t1 #8
addi t0 zero #1000
st t0 t1 #9

                            --find min in this array
ld t1 zero #0               --t1 ::= start
addi t2 zero #2147483647    --t2 ::= min
addi t3 zero #0             --t3 ::= i
ld t0 zero #1
muli t0 t0 #-1              --t0 ::= -length
                            -- for(i = 0; i < length; i++)
add t4 t1 t3                --t4 ::= i + start (memory index)
ld t5 t4 #0                 --t5 ::= current
cmp t6 t2 t5                --compare min to current (if t2 > t5, this sets t6 to 1)
jplz t6 #2                  --if t6 is 1, we dont branch
addi t2 t5 #0               --set min to current
add a0 t3 t0                --a0 ::= i - length
addi a0 a0 #2               --a0 ::= i - length + 1      which is 1 just when i - length = -1 (stopping condition)
addi t3 t3 #1               --i++
jplz a0 #-8                 --jump to loop start
st t2 zero #2               --store t2 at 0x2

